---
description: 
globs: src/mastra/agents/**/*.ts
alwaysApply: false
---
---
Rule Type: Auto Attached
Globs: ["src/mastra/agents/**/*.ts"]
Description: "Guidelines and best practices for developing AI agents within the AI-Mastra framework, updated to reflect current documentation."
---

# AI-Mastra Agent Development Patterns

Start here for patterns and conventions when creating or evolving agents.  For full details, see:

- Agents Overview: https://mastra.ai/en/docs/agents/overview  
- Agent Memory: https://mastra.ai/en/docs/agents/agent-memory  
- Tools & MCP: https://mastra.ai/en/docs/agents/using-tools-and-mcp  
- Runtime Variables: https://mastra.ai/en/docs/agents/runtime-variables  
- Dynamic Agents: https://mastra.ai/en/docs/agents/dynamic-agents  

## 1. Agent Definition

Agents are instantiated via `new Agent({ … })` from `@mastra/core/agent`.  Maintain strict TypeScript and TSDoc standards.

```ts
export const myAgent = new Agent({
  name: 'My Agent',
  instructions: `…`,
  model: createTracedGoogleModel('model-id', {
    name: 'my-agent-model',
    tags: ['agent', 'custom'],
    temperature: 0.5,
  }),
  tools: {
    // static tools
    toolA,
    // dynamic MCP tools
    ...(await mcp.getTools()),
  },
  memory: agentMemory,
});
```

### 1.1 Registration

Always export your agent and register it in `src/mastra/index.ts`:

```ts
import { myAgent } from './agents/myAgent';
export const mastra = new Mastra({
  agents: { myAgent },
});
```

## 2. Core Properties

- **name**: Unique, human-readable identifier for logging and metrics.
- **instructions**: The system/meta-prompt.  Structure into sections:
  1. ROLE DEFINITION  
  2. CORE CAPABILITIES  
  3. BEHAVIORAL GUIDELINES  
  4. CONSTRAINTS & BOUNDARIES  
  5. SUCCESS CRITERIA  
  6. TOOL USAGE NOTES  
- **model**: Use `createTracedGoogleModel` (or other traced provider) for observability.
- **tools**:  
  - Static tools imported directly  
  - MCP tools via `await mcp.getTools()` (see Tools & MCP doc)  
  - For tool-call + structured output, use `experimental_output` with a Zod schema.
- **memory**: Use the shared `agentMemory` for thread-based context recall.

## 3. Structured Output & Tool Calls

When you need both tools and strong typing:

```ts
import { z } from 'zod';

const schema = z.object({ result: z.string() });
const res = await myAgent.generate(
  [{ role: 'user', content: '…' }],
  { experimental_output: schema, maxSteps: 3 }
);
console.log(res.object.result);
```

Monitor multi-step flows with `maxSteps`, `onStepFinish` and `onFinish`.

## 4. Memory Usage

- Always import and pass `agentMemory`.  
- Tag threads by resource or session:  
  ```ts
  await agentMemory.createThread({ resourceId: 'user-123' });
  ```
- Leverage semantic recall processors (see Agent Memory doc) for retrieval.

## 5. Runtime Variables

Use runtime context to inject environment, resource IDs, or thread IDs:

```ts
const res = await myAgent.generate(messages, {
  resourceId: 'project-xyz',
  threadId: 'thread-abc',
});
```

Runtime variables enable dynamic prompting and context stitching.

## 6. Dynamic Agents

For on-the-fly agents or specialized variants, use factories and tracing:

```ts
export const createSearchAgent = traceRAGOperation(async (ctx) => {
  const instructions = `… dynamic prompt based on ${ctx.query} …`;
  return new Agent({ name: 'SearchAgent', instructions, model: …, tools: {…}, memory: agentMemory });
}, 'dynamic');
```

See Dynamic Agents doc for patterns around `traceRAGOperation` and prompt managers.

## 7. Logging & Error Handling

- Use `PinoLogger` for module-level logs.  
- Wrap external calls (tools, APIs) in `try/catch`, log errors, and rethrow or return structured error objects.

## 8. Export & Maintenance

- Keep TSDoc up to date on each agent file.  
- Review against the live docs periodically to incorporate new features or best practices.