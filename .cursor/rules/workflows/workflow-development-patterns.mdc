---
description: 
globs: src/mastra/workflows/**/*.ts,src/mastra/workflows/inngest/**/*.ts
alwaysApply: false
---
---
Rule Type: Auto Attached
Globs: ["src/mastra/workflows/**/*.ts", "src/mastra/workflows/inngest/**/*.ts"]
Description: "Defines standards for creating workflows in AI-Mastra, with detailed guidance on Inngest integration for durable, event-driven processes. Activates when editing files in 'src/mastra/workflows/' or 'src/mastra/workflows/inngest/'."
---

# AI-Mastra Workflow Development Patterns

This document outlines standard patterns for developing workflows in the AI-Mastra framework. Workflows orchestrate agents and tools for complex tasks. Adherence ensures consistency and proper integration with the Mastra core workflow engine and the Inngest durable execution layer.

Keep your workflows robust, maintainable, and fully typed by following the official Mastra guides:

- Workflows Overview: https://mastra.ai/en/docs/workflows/overview  
- Control Flow: https://mastra.ai/en/docs/workflows/control-flow  
- Suspend & Resume: https://mastra.ai/en/docs/workflows/suspend-and-resume  
- Input Data Mapping: https://mastra.ai/en/docs/workflows/input-data-mapping  
- Using Agents & Tools: https://mastra.ai/en/docs/workflows/using-with-agents-and-tools  

Reference API:
- Workflow: https://mastra.ai/en/reference/workflows/workflow  
- Step: https://mastra.ai/en/reference/workflows/step  
- then: https://mastra.ai/en/reference/workflows/then  
- parallel: https://mastra.ai/en/reference/workflows/parallel  
- branch: https://mastra.ai/en/reference/workflows/branch  
- dowhile: https://mastra.ai/en/reference/workflows/dowhile  
- dountil: https://mastra.ai/en/reference/workflows/dountil  
- foreach: https://mastra.ai/en/reference/workflows/foreach  
- map: https://mastra.ai/en/reference/workflows/map  
- commit: https://mastra.ai/en/reference/workflows/commit  
- createRun: https://mastra.ai/en/reference/workflows/create-run  
- snapshots: https://mastra.ai/en/reference/workflows/snapshots  
- watch: https://mastra.ai/en/reference/workflows/watch  
- stream: https://mastra.ai/en/reference/workflows/stream  
- execute: https://mastra.ai/en/reference/workflows/execute  
- resume: https://mastra.ai/en/reference/workflows/resume  
- start: https://mastra.ai/en/reference/workflows/start  

## 1. Define Workflows and Steps

Import core functions:
```ts
import { createWorkflow, createStep } from "@mastra/core/workflows";
import { z } from "zod";
```

Define a step:
```ts
const fetchData = createStep({
  id: "fetch-data",
  inputSchema: z.object({ query: z.string() }),
  outputSchema: z.object({ data: z.any() }),
  async execute({ inputData, mastra }) {
    return { data: await someAgent.generate([{ role: "user", content: inputData.query }]) };
  },
});
```

Compose a workflow and commit:
```ts
export const dataWorkflow = createWorkflow({
  id: "data-workflow",
  inputSchema: z.object({ query: z.string() }),
  outputSchema: z.object({ data: z.any() }),
})
  .then(fetchData)
  .commit();
```

## 2. Control Flow Primitives

- `.then(step)`: Sequential execution.  
- `.parallel([step1, step2])`: Run steps concurrently.  
- `.branch(conditionFn, trueBranch, falseBranch)`: Conditional paths.  
- `.dowhile(conditionFn)`: Loop until condition false.  
- `.dountil(conditionFn)`: Loop until condition true.  
- `.foreach(arrayFn, step)`: Iterate over arrays.  
- `.map(mapFn, step)`: Transform and process data in bulk.

## 3. Commit & Snapshots

- Use `.commit()` to finalize your workflow.  
- Snapshots are automatically captured for each step; review with `workflow.createRun().watch()`.

## 4. Execution Patterns

Instantiate and run:
```ts
const run = mastra.getWorkflow("dataWorkflow").createRun();
const result = await run.start({ inputData: { query: "info" } });
```
- `start()`: Execute end-to-end.  
- `stream()`: Stream intermediate messages.  
- `watch(callback)`: Listen to every event.  
- `resume(snapshot)`: Resume from a saved snapshot.  
- `execute()`: Internal execution for programmatic control.

## 5. Suspend & Resume

Use `step.suspend()` and `step.resume()` in custom steps for human-in-the-loop approvals or external triggers. Refer to the Suspend & Resume guide.

## 6. Input Data Mapping

Leverage `inputMapper`/`outputMapper` in primitives (e.g., `.dountil`, `.foreach`) to transform data between steps. See Input Data Mapping guide.

## 7. Using Agents & Tools

Inside `execute`, call agents (`agent.generate()`) or tools (`mastra.callTool()`), ensuring you pass the correct `threadId`/`resourceId`.

## 8. Inngest Integration for Durable Workflows
Inngest provides the reliability layer for many AI-Mastra workflows, especially those involving long-running processes, asynchronous operations, event-driven triggers, or complex coordination.

* **Purpose:** Inngest manages state, retries, and scheduling for your workflows, making them durable and resilient to transient failures, particularly when interacting with LLMs or external APIs.
* **Mastra-Inngest Bridge:**
    * The `inngest` client is initialized in `@file /src/mastra/inngest/index.ts`.
    * The `inngestServe` function (from `@mastra/inngest`), used in `@file /src/mastra/index.ts`, exposes Mastra workflows as Inngest functions via the `/api/inngest` endpoint. This involves:
        * Creating Inngest functions for each Mastra workflow intended for Inngest management (e.g., `intelligentCoordinationWorkflow`, `agentTrainingWorkflow` are registered this way).
        * Setting up event handlers and managing workflow state persistence.
* **Defining Inngest Functions:**
    * Workflows intended to be managed by Inngest are typically defined using `inngest.createFunction(...)`.
    * This function takes configuration for the trigger (e.g., `event`, `cron`), the function `id`, and a handler that receives `event` and `step` utilities.
    * Example structure (conceptual, refer to actual Inngest workflow files like `@file /src/mastra/workflows/inngest/intelligent-coordination-workflow.ts`):
      ```typescript
      import { inngest } from '../inngest'; // From @file /src/mastra/inngest/index.ts
      import { someMastraAgent } from '../../agents';

      export const exampleInngestWorkflow = inngest.createFunction(
        { id: 'example-inngest-workflow', name: 'Example Inngest Workflow' },
        { event: 'app/example.event.triggered' },
        async ({ event, step, logger }) => {
          const inputData = event.data;

          const resultStep1 = await step.run('step1-data-fetching', async () => {
            // Call agents, tools, or other logic
            // This block is retried on failure and its result is memoized
            logger.info('Running step 1 with input:', inputData);
            const agentResponse = await someMastraAgent.generate([{ role: 'user', content: inputData.prompt }]);
            return { data: agentResponse.text };
          });

          await step.sleep('wait-for-processing', '5s'); // Durable sleep

          const resultStep2 = await step.run('step2-finalization', async () => {
            // Further processing using resultStep1.data
            return { finalOutput: `Processed: ${resultStep1.data}` };
          });

          await step.sendEvent('notify-completion', { // Send event to trigger other functions or for notification
            name: 'app/example.workflow.completed',
            data: { workflowId: event.id, output: resultStep2.finalOutput },
          });

          return { event, body: resultStep2 };
        }
      );
      ```
* **Key Inngest Step Utilities (`step` object):**
    * `step.run(name, handler)`: Wraps critical logic. Ensures the handler is retried on failure and its result is memoized. Calls to AI agents, external APIs, or any fallible operation should be within a `step.run()`.
    * `step.sleep(name, duration)` / `step.sleepUntil(name, time)`: Pauses the workflow durably.
    * `step.waitForEvent(name, options)`: Pauses the workflow until a specified event is received. Essential for human-in-the-loop or external triggers.
    * `step.sendEvent(id, eventPayloads)`: Sends one or more events from within the workflow. This is the preferred way to trigger subsequent events or workflows as it links tracing.
    * `step.invoke(name, options)`: Calls another Inngest function and waits for its result.
* **Event Triggers:** Define how Inngest functions are initiated (e.g., `{ event: 'your/event.name' }`, `{ cron: 'TZ=America/New_York 0 0 * * *' }`).
* **Concurrency, Throttling, Debouncing:** Configure these on your Inngest function definition to manage load, API rate limits, or execution frequency. For example:
    ```typescript
    // Conceptual
    export const rateLimitedFunction = inngest.createFunction(
      {
        id: 'rate-limited-fn',
        concurrency: { limit: 5 }, // Max 5 concurrent runs
        // or debounce: { period: '10s' }
      },
      { event: 'some/trigger.event' },
      async ({ event, step }) => { /* ... */ }
    );
    ```
* **Logging:** Use the `logger` provided in the Inngest function handler (`async ({ event, step, logger }) => { ... }`) for logs that will be captured and displayed within the Inngest dashboard for that specific run.
* **Error Handling:** While `step.run` handles retries, ensure your step logic within it correctly throws errors to trigger Inngest's retry mechanism. Catch and handle business logic errors as needed.

## 10. Logging & Error Handling

- Retrieve logger: `const logger = mastra.getLogger()`.  
- Wrap `execute` logic in `try/catch`, log and rethrow for automatic retries or handle business errors gracefully.

## 11. Exporting and Registration
* Export workflow instances.
* Register Mastra workflows (those not solely managed by Inngest `createFunction`) in `@file /src/mastra/index.ts`.
* Inngest functions defined with `inngest.createFunction` are typically collected and passed to `serve` or deployed via Inngest CLI. Your `@mastra/inngest` `inngestServe` handles registration of Mastra workflows as Inngest functions.

By understanding these patterns, especially the role and utilization of Inngest for durable execution, developers can build robust and reliable multi-step processes within AI-Mastra.